from typing import Any
from typing import AsyncContextManager
from typing_extensions import Self


class Pool:
    def acquire(self) -> AsyncContextManager[Connection]: ...
    async def close(self) -> None: ...

class Connection:
    async def execute(self, query: str) -> str: ...
    async def fetchrow(self, query: str, *args: Any) -> Record | None: ...
    async def fetchval(self, query: str) -> Any: ...
    def transaction(self) -> Transaction: ...

class Record:
    def __getitem__(self, key: str) -> Any: ...

class Transaction:
    async def __aenter__(self) -> Self: ...
    async def __aexit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...

async def create_pool(
    dsn: str, 
    min_size: int = ..., 
    max_size: int = ..., 
    command_timeout: int = ...
) -> Pool: ...